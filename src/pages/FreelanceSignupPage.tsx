import {
  Button,
  Form,
  type FormProps,
  Input,
  Steps,
  DatePicker,
  Select,
  Radio,
  Upload,
} from "antd";
import { useState } from "react";
import type { DatePickerProps } from "antd";
import {
  EyeInvisibleOutlined,
  EyeTwoTone,
  PlusOutlined,
} from "@ant-design/icons";
import { FreelanceRegisterFieldType } from "../type";
import { provinceList } from "../data";
import Results from "../components/shared/Results";

const steps = [
  {
    title: "‡∫™‡∫∞‡ªù‡∫±‡∫Å‡ªÄ‡∫õ‡∫±‡∫ô‡∫ü‡∫µ‡∫Æ‡ªÅ‡∫•‡∫Æ‡∫ô",
  },
  {
    title: "‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡ªà‡∫ß‡∫ô‡∫ï‡∫ª‡∫ß",
  },
  {
    title: "‡∫Å‡∫≤‡∫ô‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫ï‡∫ª‡∫ß‡∫ï‡∫ª‡∫ô",
  },
  {
    title: "‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î",
  },
];

const FreelanceSignupPage = () => {
  const [current, setCurrent] = useState(0);

  const next = () => {
    setCurrent(current + 1);
  };

  const prev = () => {
    setCurrent(current - 1);
  };

  const items = steps.map((item) => ({
    key: item.title,
    title: item.title,
  }));

  const primaryButtonText = () => {
    if (current >= 0) {
      return "‡∫ï‡ªç‡ªà‡ªÑ‡∫õ";
    }
    if (current === steps.length - 1) {
      return "‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô OTP";
    }
  };

  const onChange: DatePickerProps["onChange"] = (date, dateString) => {
    console.log(date, dateString);
  };

  const onFinish: FormProps<FreelanceRegisterFieldType>["onFinish"] = (
    values
  ) => {
    console.log("üöÄ ~ values:", values);
  };

  const onFinishFailed: FormProps<FreelanceRegisterFieldType>["onFinishFailed"] =
    (errorInfo) => {
      console.log("üöÄ ~ errorInfo:", errorInfo);
    };
  const handleChange = (value: string) => {
    console.log(`selected ${value}`);
  };

  const normFile = (e: any) => {
    if (Array.isArray(e)) {
      return e;
    }
    return e?.fileList;
  };

  return (
    <>
      <div className="_container gap-10">
        <div>
          <h1 className="text-3xl font-bold text-primary">Freelance Sign Up</h1>
          <p className="mt-2 max-w-sm">
            ‡∫™‡∫∞‡ªù‡∫±‡∫Å‡ªÄ‡∫õ‡∫±‡∫ô‡∫ü‡∫•‡∫µ‡ªÅ‡∫•‡∫£‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Å‡∫≤‡∫ô‡∫ä‡∫≠‡∫≠‡∫Å‡∫´‡∫≤‡∫Ñ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ó‡∫µ‡ªà‡ªÄ‡ªù‡∫≤‡∫∞‡∫™‡∫ª‡∫° ‡ªÅ‡∫•‡∫∞ ‡∫õ‡∫≠‡∫Å‡ªÑ‡∫û
          </p>
        </div>
        <div className="w-full flex flex-col gap-10 items-center justify-center px-10">
          <div className="absolute top-0 -z-10 h-full w-full bg-white">
            <div className="absolute bottom-auto left-auto right-0 top-0 h-[500px] w-[500px] -translate-x-[30%] translate-y-[20%] rounded-full bg-[#1A96CB]/20 opacity-50 blur-[80px]"></div>
          </div>
          <Steps
            responsive
            current={current}
            labelPlacement="vertical"
            items={items}
          />
          <Form
            layout="vertical"
            className="w-full max-w-xl"
            name="basic"
            labelCol={{ span: 8 }}
            initialValues={{ remember: true }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
          >
            {/* Step 1 */}
            <div className={`${current === 0 ? "block" : "hidden"}`}>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡∫ä‡∫∑‡ªà‡ªÅ‡∫ó‡ªâ"
                name="fname"
                rules={[
                  { required: true, message: "Please input your phone!" },
                ]}
              >
                <Input className="w-full" size="large" />
              </Form.Item>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫π‡∫ô"
                name="lname"
                rules={[
                  { required: true, message: "Please input your phone!" },
                ]}
              >
                <Input className="w-full" size="large" />
              </Form.Item>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ö‡ªâ‡∫≤‡∫ô"
                name="village"
                rules={[
                  { required: true, message: "Please input your phone!" },
                ]}
              >
                <Select
                  onChange={handleChange}
                  options={provinceList.map((province) => ({
                    value: province.englishName,
                    label: province.laoName,
                  }))}
                />
              </Form.Item>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡ªÄ‡∫°‡∫∑‡∫≠‡∫á"
                name="district"
                rules={[{ required: true, message: "Please input" }]}
              >
                <Select
                  onChange={handleChange}
                  options={provinceList.map((province) => ({
                    value: province.englishName,
                    label: province.laoName,
                  }))}
                />
              </Form.Item>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡ªÅ‡∫Ç‡∫ß‡∫á"
                name="province"
                rules={[{ required: true, message: "Please input" }]}
              >
                <Select
                  onChange={handleChange}
                  options={provinceList.map((province) => ({
                    value: province.englishName,
                    label: province.laoName,
                  }))}
                />
              </Form.Item>
            </div>

            {/* Step 2 personal info*/}
            <div className={`${current === 1 ? "block" : "hidden"}`}>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫õ‡∫µ‡ªÄ‡∫Å‡∫µ‡∫î"
                name="dob"
                rules={[{ required: true, message: "Please input" }]}
              >
                <DatePicker
                  className="w-full"
                  size="large"
                  placeholder="‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡ªÄ‡∫Å‡∫¥‡∫î"
                />
              </Form.Item>

              <div className="mb-5">
                <h4 className="mb-2">‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡ªâ‡∫ô‡∫ï‡∫ª‡∫ß‡∫ï‡∫ª‡∫ô</h4>
                <Radio.Group
                  onChange={(e) => console.log(e.target.value)}
                  defaultValue="a"
                  buttonStyle="solid"
                >
                  <Radio.Button value="a">Hangzhou</Radio.Button>
                  <Radio.Button value="b">Shanghai</Radio.Button>
                  <Radio.Button value="c">Beijing</Radio.Button>
                  <Radio.Button value="d">Chengdu</Radio.Button>
                </Radio.Group>
              </div>
            </div>

            {/* Step 3 verification */}
            <div className={`${current === 2 ? "block" : "hidden"}`}>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡∫ä‡∫∑‡ªà‡ªÅ‡∫ó‡ªâ"
                name="fname"
                rules={[
                  {
                    required: true,
                    message: "Please input your first name!",
                  },
                ]}
              >
                <Input size="large" />
              </Form.Item>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô"
                name="lname"
                rules={[
                  {
                    required: true,
                    message: "Please input your last name!",
                  },
                ]}
              >
                <Input size="large" />
              </Form.Item>
              <Form.Item<FreelanceRegisterFieldType>
                label="‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô"
                name="documentType"
                rules={[
                  { required: true, message: "Please input your phone!" },
                ]}
              >
                <Select onChange={handleChange} options={[]} />
              </Form.Item>
              <Form.Item
                label="Upload"
                valuePropName="fileList"
                getValueFromEvent={normFile}
              >
                <Upload action="/upload.do" listType="picture-card">
                  <button
                    style={{ border: 0, background: "none" }}
                    type="button"
                  >
                    <PlusOutlined />
                    <div style={{ marginTop: 8 }}>Upload</div>
                  </button>
                </Upload>
              </Form.Item>
            </div>

            {/* Step 4 Result */}
            <div className={` ${current === 3 ? "block" : "hidden"}`}>
              <Results
                status="success"
                title="‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î"
                subtTitle="‡∫û‡∫ß‡∫Å‡ªÄ‡∫Æ‡∫ª‡∫≤‡∫à‡∫∞‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫û‡∫≤‡∫ç‡ªÉ‡∫ô 3 ‡∫ß‡∫±‡∫ô ‡ªÅ‡∫•‡ªâ‡∫ß‡∫ó‡∫≤‡∫á‡ªÄ‡∫Æ‡∫ª‡∫≤‡∫à‡∫∞‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫Å‡∫±‡∫ö ‡∫Ç‡∫≠‡∫ö‡ªÉ‡∫à‡∫ó‡∫µ‡ªà‡ªÉ‡∫ä‡ªâ‡∫ö‡ªç‡∫•‡∫¥‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫ª‡∫≤‡ªÄ‡∫î‡∫µ‡ªâ"
              />
            </div>

            {/* Buttons */}
            <Form.Item>
              <div
                className={`mt-2 gap-2 flex items-center ${
                  current === 3 && "hidden"
                }`}
              >
                {current < steps.length - 1 && (
                  <Button
                    type="primary"
                    className="bg-primary"
                    block
                    size="large"
                    onClick={() => next()}
                  >
                    {primaryButtonText()}
                  </Button>
                )}
                {current === steps.length - 1 && (
                  <Button
                    type="primary"
                    block
                    className="bg-primary"
                    htmlType="submit"
                    size="large"
                  >
                    ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô
                  </Button>
                )}
                {current > 0 && (
                  <Button block size="large" onClick={() => prev()}>
                    ‡∫Å‡∫±‡∫ö‡∫Ñ‡∫∑‡∫ô
                  </Button>
                )}
              </div>
            </Form.Item>
          </Form>
        </div>
      </div>
    </>
  );
};

export default FreelanceSignupPage;
